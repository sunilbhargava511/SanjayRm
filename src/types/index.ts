export interface Message {
  id: string;
  type?: 'user' | 'assistant' | 'system_event'; // Add system_event type
  sender?: 'user' | 'assistant'; // Keep for backward compatibility
  content: string;
  timestamp: Date;
  isVoice?: boolean;
  rawTranscript?: string; // Original voice transcript before cleanup
  citedArticles?: Article[]; // Add support for cited articles in RAG responses
  sessionEvent?: SessionEvent; // Include session event data if this is a system event
}

// Session Event Types
export type SessionEventType = 
  | 'session_started'
  | 'elevenlabs_conversation_started'
  | 'lesson_started'
  | 'lesson_qa_started'
  | 'open_conversation_started';

export interface SessionEventMetadata {
  // Common fields
  userId?: string;
  sessionId: string;
  timestamp: Date;
  
  // Session started specific
  userAgent?: string;
  timezone?: string;
  previousSessionDate?: Date;
  
  // ElevenLabs conversation specific  
  agentId?: string;
  voiceSettings?: {
    voiceId: string;
    stability: number;
    similarityBoost: number;
    style: number;
  };
  conversationId?: string;
  
  // Lesson specific
  lessonId?: string;
  lessonTitle?: string;
  lessonProgress?: string; // e.g., "0/5 sections"
  difficulty?: string;
  estimatedDuration?: number;
  
  // Q&A specific
  availableQuestions?: number;
  questionTypes?: string[];
  parentLessonId?: string;
  
  // Open conversation specific
  conversationContext?: string;
  detectedIntent?: string;
  userMood?: string;
}

export interface SessionEvent {
  id: string;
  type: SessionEventType;
  title: string;
  summary: string;
  timestamp: Date;
  metadata: SessionEventMetadata;
  firstMessage?: string; // The initial message/prompt for this event
  status: 'active' | 'completed' | 'interrupted';
  icon?: string; // Unicode emoji or icon identifier
}

export interface Session {
  id: string;
  title: string;
  messages: Message[];
  notes: SessionNote[];
  createdAt: Date;
  updatedAt: Date;
  summary?: string;
  isActive?: boolean; // Add missing field used in code
  metadata?: Record<string, any>; // For storing additional data like ElevenLabs conversation ID
  // Lesson state tracking
  currentLessonId?: string; // If in a lesson, which lesson
  lessonPhase?: 'start_message' | 'video' | 'conversation' | 'completed'; // Current phase of lesson
  lessonConversationId?: string; // ElevenLabs conversation ID for lesson Q&A
}

export interface SessionNote {
  id: string;
  content: string;
  type: 'insight' | 'action' | 'recommendation' | 'question';
  timestamp: Date;
  messageId?: string; // Link to the message that generated this note
  autoGenerated?: boolean; // Add missing field for auto-generated notes
  priority?: 'high' | 'medium' | 'low'; // Add priority field from CLAUDE.md
}

export interface Article {
  id: string;
  title: string;
  summary: string;
  content: string;
  category: string;
  tags: string[];
  readTime: string;
  author: string;
  lastUpdated: Date;
}

export interface VoiceRecording {
  isRecording: boolean;
  transcript: string;
  confidence?: number;
  error?: string;
}

export interface KnowledgeBaseContext {
  relevantArticles: Article[];
  searchQuery: string;
  confidence: number;
}

// Educational System Types

export interface Conversation {
  id: string;
  conversationId?: string; // ElevenLabs conversation_id for reference
  conversationType: 'structured' | 'open-ended';
  userId?: string;
  completed: boolean;
  personalizationEnabled: boolean;
  conversationAware?: boolean; // Optional - falls back to admin setting if not set
  createdAt: Date;
  updatedAt: Date;
}

// Keep old interface for backward compatibility during migration
export interface EducationalSession extends Conversation {}


export interface AdminSettings {
  id: string;
  voiceId: string;
  voiceDescription: string;
  personalizationEnabled: boolean;
  conversationAware: boolean; // Enable conversation-aware responses
  useStructuredConversation: boolean;
  debugLlmEnabled: boolean; // Enable LLM debug capture
  baseReportPath?: string;
  baseReportTemplate?: Uint8Array; // PDF template binary data
  updatedAt: Date;
}

export interface SystemPrompt {
  id: string;
  type: 'qa' | 'lesson_qa' | 'report'; // Simplified to two main types + legacy report
  content: string;
  lessonId?: string; // For lesson-specific prompts
  active: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface KnowledgeBaseFile {
  id: string;
  filename: string;
  content: string;
  fileType: string;
  indexedContent?: string;
  uploadedAt: Date;
}

export interface SessionReport {
  id: string;
  sessionId: string;
  reportPath: string;
  reportData?: Uint8Array; // PDF binary data
  generatedAt: Date;
}

// Educational Flow Types

export interface ConversationState {
  conversation: Conversation | null;
  isPersonalizationEnabled: boolean;
}

// Keep old interface for backward compatibility during migration
export interface EducationalSessionState extends ConversationState {
  session: EducationalSession | null; // Alias for conversation
}

// Admin Panel Types
export interface AdminPanelState {
  settings: AdminSettings | null;
  systemPrompts: SystemPrompt[];
  knowledgeBase: KnowledgeBaseFile[];
  isLoading: boolean;
  error: string | null;
}


// Voice & Audio Types (enhanced)
export interface VoiceSettings {
  voiceId: string;
  description: string;
  stability?: number;
  similarityBoost?: number;
  style?: number;
}

export interface AudioPlaybackState {
  isPlaying: boolean;
  currentText: string;
  canInterrupt: boolean;
  error?: string;
}

// Lesson System Types
export interface Lesson {
  id: string;
  title: string;
  videoUrl: string;
  videoSummary: string;
  startMessage?: string; // TTS message played before video
  orderIndex: number;
  prerequisites: string[]; // Lesson IDs that must be completed first
  active: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface UserSession {
  id: string;
  userId?: string;
  completedLessons: string[]; // Array of completed lesson IDs
  currentLessonId?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface LessonConversation {
  id: string;
  sessionId: string;
  lessonId: string;
  conversationId?: string; // ElevenLabs conversation ID
  completed: boolean;
  messagesCount: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface LessonProgress {
  sessionId: string;
  completedLessons: Lesson[];
  currentLesson?: Lesson;
  nextRecommendedLesson?: Lesson;
  totalLessons: number;
  percentComplete: number;
}

// Calculator System Types
export interface Calculator {
  id: string;
  name: string;
  url: string | null;
  description: string;
  calculatorType: 'url' | 'code';
  codeContent: string | null;
  artifactUrl: string | null;
  fileName: string | null;
  orderIndex: number;
  active: boolean;
  isPublished: boolean;
  createdAt: string;
  updatedAt: string;
}